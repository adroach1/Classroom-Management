<?xml version="1.0" encoding="utf-8"?>
<project name="NinjectIncludes">
	<property name="path.base" value="${project::get-base-directory()}"/>
	<property name="path.build" value="${path.base}/build"/>
	<property name="path.lib" value="${path.base}/../lib"/>
	<property name="path.libMvc2" value="${path.base}/lib"/>
	<property name="path.dist" value="${path.base}/dist"/>
	<property name="path.docs" value="${path.base}/docs"/>
	<property name="path.src" value="${path.base}/src"/>
	<property name="path.build.assemblyinfo" value="${path.src}/${build.asminfo}" dynamic="true"/>
	<property name="path.tools" value="${path.base}/../tools"/>
	<property name="path.tools.git" value="${path.tools}/git"/>

	<property name="product.name" value="Ninject.Web.Mvc" overwrite="false"/>
	<property name="product.company" value="Enkari, Ltd." overwrite="false"/>
	<property name="product.duration" value="2008-2010" overwrite="false"/>
	<property name="product.description" value="Named Scope Extension for Ninject" overwrite="false"/>
	<property name="product.keyfile" value="Ninject.snk" overwrite="false"/>
	<property name="product.docfile" value="${product.name}.xml" overwrite="false"/>
	<property name="product.assembly" value="${product.name}.dll" overwrite="false"/>

	<property name="version" value="1.0.0.0" overwrite="false"/>
	<property name="version.major" value="${version::get-major(version::parse(version))}" dynamic="true"/>
	<property name="version.minor" value="${version::get-minor(version::parse(version))}" dynamic="true"/>
	<property name="version.build" value="${version::get-build(version::parse(version))}" dynamic="true"/>
	<property name="version.revision" value="${version::get-revision(version::parse(version))}" dynamic="true"/>
	<property name="build.version" value="${version.major}.${version.minor}.${version.build}.${version.revision}" dynamic="true"/>
	<property name="build.config" value="debug" overwrite="false"/>
	<property name="build.platform" value="net-3.5" overwrite="false"/>
	<property name="build.asminfo" value="SharedAssemblyInfo.cs"/>

	<property name="package" value="false" readonly="false" overwrite="false"/>

	<property name="Is64BitOperatingSystem" value="false" />
	<property name="Is64BitProcess" value="false" />
	<property name="IsWow64Process" value="false" />
	
	<target name="DetectOperatingSystemArchitecture" depends="DetectIfWow64Process,DetectIf64BitProcess">
		<description>
			This will detect whether the current Operating System is running as a 32-bit or 64-bit Operating System regardless of whether this is a 32-bit or 64-bit process.
		</description>
		<property name="Is64BitOperatingSystem" value="${IsWow64Process or Is64BitProcess}" />
		<if test="${Is64BitOperatingSystem}">
			<echo message="The operating system you are running is 64-bit." />
		</if>
		<if test="${not Is64BitOperatingSystem}">
			<echo message="The operating system you are running is 32-bit." />
		</if>
	</target>
	
	<script language="C#" prefix="PInvoke">
		<references>
			<include name="System.dll" />
		</references>
		<imports>
			<import namespace="System.Diagnostics" />
			<import namespace="System.Runtime.InteropServices" />
		</imports>
		<code>
			<![CDATA[
				[DllImport("kernel32.dll")]
				public static extern bool IsWow64Process(System.IntPtr hProcess, out bool lpSystemInfo);
	
				[Function("IsWow64Process")]
				public bool IsWow64Process()
				{
					bool retVal = false;
	
					IsWow64Process(Process.GetCurrentProcess().Handle, out retVal);
	
					return retVal;
				}
				]]>
		</code>
	</script>
	
	<target name="DetectIfWow64Process">
		<description>
			Detects whether we are currently in a WoW64 process or not.
		</description>
	
		<property name="IsWow64Process" value="${PInvoke::IsWow64Process()}" />
		<echo message="Setting the [IsWow64Process] property to ${IsWow64Process}." />
	</target>
	 
	<target name="DetectIf64BitProcess">
		<description>
			Detects whether we are currently in a 32-bit or 64-bit process (not necessarily what the OS is running). Note that as of the time of this writing, this will ALWAYS return false because NAnt is compiled to run in 32-bit mode only.
		</description>
	
		<!-- This can return x86, x64, AMD64, or IA64 as of the time of this writing. This works for a 32-bit process in a 64-bit OS because the OS makes the 64-bitness transparent to the process in this environment variable. -->
		<property name="Is64BitProcess" value="${environment::get-variable('PROCESSOR_ARCHITECTURE')!='x86'}" />
		<echo message="Setting the [Is64BitProcess] property to ${Is64BitProcess}." />
	</target>

	<target name="rebuild" depends="clean, all"/>

	<target name="clean">
		<delete dir="${path.build}" if="${directory::exists(path.build)}"/>
		<delete dir="${path.dist}" if="${directory::exists(path.dist)}"/>
	</target>

	<target name="create-assembly-info" depends="get-git-revision">
		<echo message="##teamcity[buildNumber '${build.version}']" />
		<asminfo output="${path.build.assemblyinfo}" language="CSharp">
			<imports>
				<import namespace="System"/>
				<import namespace="System.Reflection"/>
				<import namespace="System.Runtime.InteropServices"/>
			</imports>
			<attributes>
				<attribute type="AssemblyProductAttribute" value="${product.name}: ${product.description}"/>
				<attribute type="AssemblyCompanyAttribute" value="${product.company}"/>
				<attribute type="AssemblyCopyrightAttribute" value="Copyright © ${product.duration} ${product.company} and contributors"/>
				<attribute type="AssemblyVersionAttribute" value="${build.version}"/>
				<attribute type="ComVisibleAttribute" value="false"/>
				<attribute type="CLSCompliantAttribute" value="true"/>
			</attributes>
		</asminfo>
	</target>

	<target name="init" depends="create-assembly-info">
		<call target="DetectOperatingSystemArchitecture"/>
		<mkdir dir="${path.build}" if="${not(directory::exists(path.build))}"/>
		<mkdir dir="${path.dist}" if="${not(directory::exists(path.dist))}"/>

		<call target="config-build-${build.config}"/>
		<call target="config-platform-${build.platform}"/>

		<property name="current.path.ninject.lib" value="${path.lib}/Ninject/${build.platform}"/>
		<property name="current.path.build" value="${path.build}/${build.platform}/${build.config}"/>
		<property name="current.path.build.lib" value="${path.build}/${build.platform}/${build.config}/lib"/>

		<mkdir dir="${current.path.build}" if="${not(directory::exists(current.path.build))}"/>
		<mkdir dir="${current.path.build.lib}" if="${not(directory::exists(current.path.build.lib))}"/>

		<copy todir="${current.path.build}">
			<fileset basedir="${path.base}">
				<include name="LICENSE.txt"/>
			</fileset>
		</copy>
		
		<copy todir="${current.path.build.lib}">
			<fileset basedir="${current.path.ninject.lib}">
				<include name="**/*.dll"/>
				<include name="**/*.xml"/>
			</fileset>
		</copy>
	</target>

	<target name="config-build-debug">
		<property name="build.debug" value="true"/>
		<property name="build.optimize" value="false" overwrite="false"/>
		<property name="global.build.defines" value="DEBUG,TRACE"/>
	</target>

	<target name="config-build-release">
		<property name="build.debug" value="true"/>
		<property name="build.optimize" value="true" overwrite="false"/>
		<property name="global.build.defines" value="TRACE,STRONG"/>
	</target>

	<target name="config-platform-net-3.5">
		<property name="nant.settings.currentframework" value="net-3.5"/>
		<property name="build.defines" value="${global.build.defines},NET,NET_35"/>
	</target>

	<target name="config-platform-net-4.0">
		<property name="nant.settings.currentframework" value="net-4.0"/>
		<property name="build.defines" value="${global.build.defines},NET,NET_40"/>
	</target>

	<target name="config-platform-mono-2.0">
		<property name="nant.settings.currentframework" value="mono-2.0"/>
		<property name="build.defines" value="${global.build.defines},NET,NET_35,MONO"/>
	</target>

	<target name="UnzipDependencies">
		<foreach item="File" property="filepath">
			<in>
				<items>
					<include name="${path.lib}/Ninject/*release*.zip"/>
				</items>
			</in>
			<do>
				<property name="filename" value="${path::get-file-name-without-extension(filepath)}"/>
				<property name="index" value="${string::index-of(filename, 'release')}"/>
				<property name="destinationDir" value="${string::substring(filename, string::index-of(filename, 'release') + 8, string::get-length(filename) - string::index-of(filename, 'release') - 8)}"/>
				
				<unzip zipfile="${filepath}" todir="${path.lib}/Ninject/${destinationDir}"/>
			</do>
		</foreach>	
	</target>
	
	<target name="package-all" depends="all package-bin package-source" />
	
	<target name="buildServerPlatforms">
		<foreach item="String" in="net-3.5,net-4.0,mono-2.0" delim="," property="platform">
			<property name="build.platform" value="${platform}"/>
			<call target="package-bin"/>
		</foreach>
		<call target="package-source"/>
	</target>

	<target name="allPlatforms">
		<foreach item="String" in="net-3.5,net-4.0,mono-2.0" delim="," property="platform">
			<property name="build.platform" value="${platform}"/>
			<call target="package-bin"/>
		</foreach>
		<call target="package-source"/>
	</target>
	
	<target name="package-bin" depends="all">
		<mkdir dir="${path.dist}" if="${not(directory::exists(path.dist))}"/>
		<zip zipfile="${path.dist}\${product.name}2-${build.version}-${build.config}-${build.platform}.zip" ziplevel="9">
			<fileset basedir="${current.path.build}">
				<include name="**/*.*"/>
			</fileset>
		</zip>
	</target>

	<target name="package-source" depends="create-assembly-info">
		<mkdir dir="${path.dist}" if="${not(directory::exists(path.dist))}"/>
		<zip zipfile="${path.dist}\${product.name}2-${build.version}-source.zip" ziplevel="9">
			<fileset basedir="${path.base}">
				<include name="lib/*.*"/>
				<include name="**/*.cs"/>
				<include name="**/*.csproj"/>
				<include name="**/*.sln"/>
				<include name="**/*.txt"/>
				<include name="**/*.build"/>
				<include name="**/*.include"/>
				<include name="**/*.snk"/>
			</fileset>
		</zip>
	</target>
	
	<target name="revert">
		<echo message="Reverting version info"/>
		<exec
			program="${path.tools.git}/git.exe"
			commandline='checkout "${path.build.assemblyinfo}"'
			failonerror="false"/>
	</target>	

	<target name="get-git-revision">
		<property name="temp.revision.file" value="RevisionNr.tmp" />
		<exec
			program="${path.tools.git}/git.exe"
			commandline='describe --long'
			failonerror="true" 
			output="${temp.revision.file}"/>
		<loadfile file="${temp.revision.file}" property="actual.git.revision"/>
		<regex pattern=".*-(?&lt;gitrevisionnumber&gt;\d+)-.*" input="${actual.git.revision}"/>
		<property name="version.revision" value="${gitrevisionnumber}" overwrite="true" />
		<delete file="${temp.revision.file}" failonerror="false"/>
	</target>
	
</project>